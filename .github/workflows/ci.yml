name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose --workspace
        env:
          REDIS_URL: redis://localhost:6379
          TWILIO_AUTH_TOKEN: dummy_token
          HF_API_TOKEN: dummy_token
          GEMINI_API_KEY: dummy_key

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cargo build --release --target ${{ matrix.target }} --verbose --workspace
          else
            cargo build --release --verbose --workspace
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lotabots-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lotabots-cli

  deploy:
    name: Deploy
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: lotabots-x86_64-unknown-linux-gnu
          path: deploy/x86_64

      - name: Download aarch64 artifact
        uses: actions/download-artifact@v4
        with:
          name: lotabots-aarch64-unknown-linux-gnu
          path: deploy/aarch64

      - name: Set up environment
        run: |
          mkdir -p deploy/config
          echo "${{ secrets.ENV_FILE }}" > deploy/config/.env
          chmod +x deploy/x86_64/lotabots-cli
          chmod +x deploy/aarch64/lotabots-cli

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "deploy/*"
          target: "/opt/lotabots"
          strip_components: 1

      - name: Restart service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            sudo systemctl restart lotabots.service
